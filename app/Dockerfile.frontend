# Use a lightweight Node.js image based on Debian
FROM node:18-slim

# Install required dependencies
RUN apt-get update && apt-get install -y python3 python3-pip python3-venv wget ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Install yt-dlp instead of youtube-dl-exec
RUN wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O /usr/local/bin/yt-dlp \
    && chmod a+rx /usr/local/bin/yt-dlp

# Set the working directory inside the container
WORKDIR /app

# Create a virtual environment
RUN python3 -m venv /app/venv

# Set the environment variable for the virtual environment
ENV PATH="/app/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Install Python dependencies inside the virtual environment
RUN pip install --no-cache-dir openai-whisper==20231117 numpy==1.24.3 \
    transformers==4.36.2 pandas==2.1.4 tqdm==4.66.1 ffmpeg-python==0.2.0 \
    static-ffmpeg==2.7 sentence-transformers

# Copy transcribe_video.py from the build context (project root) into /app/
COPY transcribe_video.py /app/

# Copy package files from the build context
COPY package*.json ./

# Install Node.js dependencies (skip postinstall scripts if necessary)
RUN npm install --ignore-scripts

# Copy the rest of the frontend source code
COPY . .

# Copy only the specific model files into /app/model
COPY model/analyze_text.py /app/model/analyze_text.py
COPY model/fact_checker.py /app/model/fact_checker.py

# Build the Next.js application (for production)
RUN npm run build

# Expose the port Next.js will run on
EXPOSE 3000

# Start the Next.js server
CMD ["npm", "run", "start"]
